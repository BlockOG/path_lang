First instruction has to be a noop

/ - noop

.// - pop top of stack
..// - duplicate top of stack

./.// <is positive> <binary number> - push integer
./..// <binary variable identifier> - pop to variable
../.// <binary variable identifier> - push variable
../..// <binary string length> <binary string> - push string

././.// <is positive> <binary number> <binary number> - push float (NOT IMPLEMENTED)
././..// - function call start (to allow optional arguments and varargs)
./../.// <binary variable identifier> - call function
./../..// <binary optional identifier> - make optional argument
.././.// <binary number> - jump to instruction
.././..// <binary number> - jump to instruction if cmp flag is Ordering::Less
../../.// <binary number> - jump to instruction if cmp flag is Ordering::Equal
../../..// <binary number> - jump to instruction if cmp flag is Ordering::Greater

./././.// - compare top two stack items, top.cmp(top2)