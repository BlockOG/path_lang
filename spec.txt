First instruction has to be a noop (basically starting at root)

Instructions:

/ - noop

.// - duplicate top of stack
..// - pop top of stack

./.// <is positive> <binary number> - push integer
./..// <binary variable identifier> - pop to variable
../.// <binary variable identifier> - push variable
../..// <binary string length> <binary string> - push string

././.// <is positive> <binary number> <binary number> - push float (NOT IMPLEMENTED)
././..// - call function
./../.// - make argument (to allow functions as arguments)
./../..// <binary optional identifier> - make optional argument
.././.// <binary number> - jump to instruction
.././..// - push top < top2
../../.// - push top == top2
../../..// - push top > top2

./././.// - index array or string, top[top2]
./././..// <binary variable identifier> - remove variable
././../.// <binary number> - jump to instruction if top of stack is false
././../..// <binary number> - jump to instruction if top of stack is true
./.././.// - push false
./.././..// - push true
./../../.// <binary array length> - push array
./../../..// - spread array (first will be top of stack)
../././.// - top + top2
../././..// - top - top2
.././../.// - top * top2
.././../..// - top / top2
../.././.// - top % top2
../.././..// - top ** top2
../../../.// - -top
../../../..// - !top

././././.// <binary number> <binary number> - swap stack values, 0 is top

Functions:

/ - Print <function varargs arity=0 built-in>
..// - PrintLn <function varargs arity=0 built-in>
./..// - Read (NOT IMPLEMENTED)
../..// - ReadLn <function constant arity=0 built-in>
././..// - ToBool <function constant arity=1 built-in>
.././..// - ToStr <function constant arity=1 built-in>
./../..// - ToInt <function constant arity=1 built-in>
../../..// - Trim <function constant arity=1 built-in>
./././..// - Len <function constant arity=1 built-in>
../././..// - Push <function constant arity=2 built-in>
./.././..// - Pop <function constant arity=1 built-in>